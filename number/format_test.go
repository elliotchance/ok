package number_test

import (
	"fmt"
	"testing"

	"github.com/elliotchance/ok/number"
	"github.com/stretchr/testify/assert"
)

var formatTests = []struct {
	in        []string
	precision int
	expected  string
}{
	// Different kinds of zero.
	{[]string{"0", "00", "0.00", "-0", "-0.0"}, -1, "0"},
	{[]string{"0", "00", "0.00", "-0", "-0.0"}, 0, "0"},
	{[]string{"0", "00", "0.00", "-0", "-0.0"}, 1, "0.0"},
	{[]string{"0", "00", "0.00", "-0", "-0.0"}, 3, "0.000"},

	// Integers.
	{[]string{"10", "0010", "10.00"}, -1, "10"},
	{[]string{"10", "0010", "10.00"}, 0, "10"},
	{[]string{"10", "0010", "10.00"}, 1, "10.0"},
	{[]string{"10", "0010", "10.00"}, 3, "10.000"},

	{[]string{"-10", "-0010", "-10.00"}, -1, "-10"},
	{[]string{"-10", "-0010", "-10.00"}, 0, "-10"},
	{[]string{"-10", "-0010", "-10.00"}, 1, "-10.0"},
	{[]string{"-10", "-0010", "-10.00"}, 3, "-10.000"},

	// Rounding precisions.
	{[]string{"12.3456", "0012.3456", "12.345600"}, 5, "12.34560"},
	{[]string{"12.3456", "0012.3456", "12.345600"}, 4, "12.3456"},
	{[]string{"12.3456", "0012.3456", "12.345600"}, 3, "12.346"},
	{[]string{"12.3456", "0012.3456", "12.345600"}, 2, "12.35"},
	{[]string{"12.3456", "0012.3456", "12.345600"}, 1, "12.3"},
	{[]string{"12.3456", "0012.3456", "12.345600"}, 0, "12"},
	{[]string{"12.3456", "0012.3456", "12.345600"}, -1, "12.3456"},

	{[]string{"-12.3456", "-0012.3456", "-12.345600"}, 5, "-12.34560"},
	{[]string{"-12.3456", "-0012.3456", "-12.345600"}, 4, "-12.3456"},
	{[]string{"-12.3456", "-0012.3456", "-12.345600"}, 3, "-12.346"},
	{[]string{"-12.3456", "-0012.3456", "-12.345600"}, 2, "-12.35"},
	{[]string{"-12.3456", "-0012.3456", "-12.345600"}, 1, "-12.3"},
	{[]string{"-12.3456", "-0012.3456", "-12.345600"}, 0, "-12"},
	{[]string{"-12.3456", "-0012.3456", "-12.345600"}, -1, "-12.3456"},

	// +/- 0.x sometimes need special handling.
	{[]string{"0.5678", "00.5678", "0.567800"}, -1, "0.5678"},
	{[]string{"0.5678", "00.5678", "0.567800"}, 0, "1"},
	{[]string{"0.5678", "00.5678", "0.567800"}, 2, "0.57"},
	{[]string{"0.5678", "00.5678", "0.567800"}, 6, "0.567800"},

	{[]string{"-0.5678", "-00.5678", "-0.567800"}, -1, "-0.5678"},
	{[]string{"-0.5678", "-00.5678", "-0.567800"}, 0, "-1"},
	{[]string{"-0.5678", "-00.5678", "-0.567800"}, 2, "-0.57"},
	{[]string{"-0.5678", "-00.5678", "-0.567800"}, 6, "-0.567800"},

	{[]string{"0.05678", "00.05678", "0.0567800"}, -1, "0.05678"},
	{[]string{"0.05678", "00.05678", "0.0567800"}, 0, "0"},
	{[]string{"0.05678", "00.05678", "0.0567800"}, 2, "0.06"},
	{[]string{"0.05678", "00.05678", "0.0567800"}, 6, "0.056780"},

	{[]string{"-0.05678", "-00.05678", "-0.0567800"}, -1, "-0.05678"},
	{[]string{"-0.05678", "-00.05678", "-0.0567800"}, 0, "-0"},
	{[]string{"-0.05678", "-00.05678", "-0.0567800"}, 2, "-0.06"},
	{[]string{"-0.05678", "-00.05678", "-0.0567800"}, 6, "-0.056780"},
}

func TestFormat(t *testing.T) {
	for _, test := range formatTests {
		for _, n := range test.in {
			t.Run(fmt.Sprintf("%s,%d", n, test.precision), func(t *testing.T) {
				actual := number.Format(number.NewNumber(n), test.precision)
				assert.Equal(t, test.expected, actual)
			})
		}
	}
}
