func myType() myType {
}

test "Type" {
    assert(Type(true) == "bool")
    assert(Type(false) == "bool")

    assert(Type('a') == "char")
    assert(Type('ðŸ˜‰') == "char")

    assert(Type(``) == "data")
    assert(Type(`hello`) == "data")

    assert(Type(0) == "number")
    assert(Type(3) == "number")
    assert(Type(-3.2) == "number")

    assert(Type("") == "string")
    assert(Type("hello") == "string")

    assert(Type(["foo", "bar"]) == "[]string")
    assert(Type([1, 2, 3]) == "[]number")
    assert(Type(any [1, 2, 3]) == "[]number")
    assert(Type([]bool []) == "[]bool")

    assert(Type({"foo": "bar", "baz": "qux"}) == "\{}string")
    assert(Type({"foo": 1, "bar": 2, "baz": 3}) == "\{}number")
    assert(Type(any {"foo": 1, "bar": 2, "baz": 3}) == "\{}number")
    assert(Type({}bool {}) == "\{}bool")

    assert(Type(func() {}) == "func()")
    assert(Type(func() number {}) == "func() number")
    assert(Type(func() (string, number) {}) == "func() (string, number)")
    assert(Type(func(a char) {}) == "func(char)")
    assert(Type(func(a, b char) {}) == "func(char, char)")
    assert(Type(func(a, b char, c []string) number {}) == "func(char, char, []string) number")

    assert(Type(myType) == "func() myType")
    instanceOfMyType = myType()
    assert(Type(instanceOfMyType) == "myType")
}
