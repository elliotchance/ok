test "'==' for literals" {
    assert(true == true)
    assert(false == false)

    assert('a' == 'a')
    assert('ğŸ˜ƒ' == 'ğŸ˜ƒ')

    assert(123 == 123)
    assert(123 == 123.00)
    assert(0 == 0)
    assert(0.00 == 0.000)
    assert(-4 == -4)
    assert(-4.0 == -4)

    assert("" == "")
    assert("foo" == "foo")
    assert("ğŸ˜ƒfoo" == "ğŸ˜ƒfoo")
    
    assert(`` == ``)
    assert(`foo` == `foo`)
    assert(`ğŸ˜ƒfoo` == `ğŸ˜ƒfoo`)
}

test "'==' for arrays" {
    assert([]bool [] == []bool [])
    assert([]bool [true] == []bool [true])
    assert([]bool [true, false] == []bool [true, false])

    assert([]char [] == []char [])
    assert([]char ['a'] == []char ['a'])
    assert([]char ['a', 'ğŸ˜ƒ'] == []char ['a', 'ğŸ˜ƒ'])

    assert([]data [] == []data [])
    assert([]data [`a`] == []data [`a`])
    assert([]data [`a`, `ğŸ˜ƒ`] == []data [`a`, `ğŸ˜ƒ`])

    assert([]number [] == []number [])
    assert([]number [1.23] == []number [1.23])
    assert([]number [1.23, 4.56] == []number [1.23, 4.56])

    assert([]string [] == []string [])
    assert([]string ["a"] == []string ["a"])
    assert([]string ["a", "ğŸ˜ƒfoo"] == []string ["a", "ğŸ˜ƒfoo"])
}

test "'==' for maps" {
    assert({}bool {} == {}bool {})
    assert({}bool {"a": true} == {}bool {"a": true})
    assert({}bool {"a": true, "b": false} == {}bool {"b": false, "a": true})

    assert({}char {} == {}char {})
    assert({}char {"foo": 'a'} == {}char {"foo": 'a'})
    assert({}char {"foo": 'a', "bar": 'ğŸ˜ƒ'} == {}char {"bar": 'ğŸ˜ƒ', "foo": 'a'})

    assert({}data {} == {}data {})
    assert({}data {"foo": `a`} == {}data {"foo": `a`})
    assert({}data {"foo": `a`, "bar": `ğŸ˜ƒ`} == {}data {"bar": `ğŸ˜ƒ`, "foo": `a`})

    assert({}number {} == {}number {})
    assert({}number {"foo": 1.23} == {}number {"foo": 1.23})
    assert({}number {"foo": 1.23, "bar": 4.56} == {}number {"bar": 4.56, "foo": 1.23})

    assert({}string {} == {}string {})
    assert({}string {"foo": "a"} == {}string {"foo": "a"})
    assert({}string {"foo": "a", "bar": "ğŸ˜ƒfoo"} == {}string {"bar": "ğŸ˜ƒfoo", "foo": "a"})
}
