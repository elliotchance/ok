test "Index" {
    assert(Index("foobar", "foo") == 0)
    assert(Index("foobar", "o") == 1)
    assert(Index("foobar", "b") == 3)
    assert(Index("foobar", "B") == -1)
    assert(Index("foobar", "bar") == 3)
    assert(Index("foobar", "bard") == -1)
}

test "IndexAfter" {
    // Since the index is below zero, these will all perform the same way as
    // Index.
    assert(IndexAfter("foobar", "foo", -1) == 0)
    assert(IndexAfter("foobar", "foo", -1) == 0)
    assert(IndexAfter("foobar", "o", -1) == 1)
    assert(IndexAfter("foobar", "b", -1) == 3)
    assert(IndexAfter("foobar", "B", -1) == -1)
    assert(IndexAfter("foobar", "bar", -1) == 3)
    assert(IndexAfter("foobar", "bard", -1) == -1)

    // Now we can try different offsets.
    assert(IndexAfter("foobar", "bar", -1) == 3)
    assert(IndexAfter("foobar", "bar", 0) == 3)
    assert(IndexAfter("foobar", "bar", 1) == 3)
    assert(IndexAfter("foobar", "bar", 2) == 3)
    assert(IndexAfter("foobar", "bar", 3) == -1)

    // The offset behavior is important because we should be able to keep
    // feeding the result until -1 safely.
    indexes = []number []
    s = "foobar"
    for i = Index(s, "o"); i != -1; i = IndexAfter(s, "o", i) {
        indexes += [i]
    }

    assert(indexes == []number [1, 2])
}

test "LastIndex" {
    assert(LastIndex("foobar", "foo") == 0)
    assert(LastIndex("foobar", "o") == 2)
    assert(LastIndex("foobar", "b") == 3)
    assert(LastIndex("foobar", "B") == -1)
    assert(LastIndex("foobar", "bar") == 3)
    assert(LastIndex("foobar", "bard") == -1)
}

test "LastIndexBefore" {
    // Since the offset is equal to than the string length these will all
    // perform the same as LastIndex.
    assert(LastIndexBefore("foobar", "foo", 6) == 0)
    assert(LastIndexBefore("foobar", "o", 6) == 2)
    assert(LastIndexBefore("foobar", "b", 6) == 3)
    assert(LastIndexBefore("foobar", "B", 6) == -1)
    assert(LastIndexBefore("foobar", "bar", 6) == 3)
    assert(LastIndexBefore("foobar", "bard", 6) == -1)

    // Now we can try different offsets.
    assert(LastIndexBefore("foobar", "foo", 5) == 0)
    assert(LastIndexBefore("foobar", "foo", 4) == 0)
    assert(LastIndexBefore("foobar", "foo", 3) == 0)
    assert(LastIndexBefore("foobar", "foo", 2) == -1)

    // The offset behavior is important because we should be able to keep
    // feeding the result until -1 safely.
    indexes = []number []
    s = "foobar"
    for i = LastIndex(s, "o"); i != -1; i = LastIndexBefore(s, "o", i) {
        indexes += [i]
    }

    assert(indexes == []number [2, 1])
}
